{"html":"<!-- TITLE: Image Viewer --><!-- SUBTITLE: A quick summary of Image Viewer --><html><head></head><body><h1 id=\"basic-usage\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#basic-usage\" aria-hidden=\"true\"></a> Basic Usage</h1>\n<h2 id=\"declaration\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#declaration\" aria-hidden=\"true\"></a> Declaration</h2><div class=\"indent-h2\"><pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { ImageViewerController } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;ionic-img-viewer&apos;</span>;\n\n<span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> imageViewerCtrl: ImageViewerController</span>) {\n\n}\n</code></pre></div>\n\n<h2 id=\"types-of-usage\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#types-of-usage\" aria-hidden=\"true\"></a> Types of Usage</h2><div class=\"indent-h2\"><ul>\n<li><strong>Image Viewer WITHOUT config options</strong></li>\n</ul><p>In html you need to declare a directive called <code>#myImage</code> or you can name it whatever you want. This directive will be passed in a <code>function</code> to present the image.</p><pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;http://i.pravatar.cc/300&quot;</span> #<span class=\"hljs-attr\">myImage</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">&quot;presentImage(myImage)&quot;</span> /&gt;</span>\n</code></pre><br><br><p>In your <strong>.ts file</strong> create a variable and passed in the <code>imageViewerCtrl.create(Image)</code> base on your <strong>declaration</strong> to create the instance of the image viewer and call the <code>imageViewer.present()</code> in order to view the image.</p><pre class=\"hljs\"><code>presentImage(myImage) { <span class=\"hljs-comment\">// View the image using image viewer</span>\n    <span class=\"hljs-keyword\">const</span> imageViewer = <span class=\"hljs-keyword\">this</span>.imageViewerCtrl.create(myImage);\n    imageViewer.present();\n  }\n</code></pre><br><br><br><ul>\n<li><strong>Image viewer WITH config options</strong></li>\n</ul><p>Using the same HTML, this time we can add a second parameter as a config options. In this example we added:</p><ul>\n<li><code>enableBackdropDismiss</code> - set it to <strong>true</strong> so whenever you click outside of the <strong>image</strong> it will close the viewer.</li>\n<li><code>onCloseCallback</code> -  expects a function as a callback whenever the image has been closed.</li>\n</ul><p>For more config options vist: <a href=\"https://www.npmjs.com/package/ionic-img-viewer\" class=\"external-link\">https://www.npmjs.com/package/ionic-img-viewer</a></p><pre class=\"hljs\"><code>presentImage(myImage) { <span class=\"hljs-comment\">// View the image using image viewer</span>\n    <span class=\"hljs-keyword\">const</span> config = {\n      enableBackdropDismiss: <span class=\"hljs-literal\">true</span>,\n      onCloseCallback: <span class=\"hljs-keyword\">this</span>.someFunc()\n    }\n    <span class=\"hljs-keyword\">const</span> imageViewer = <span class=\"hljs-keyword\">this</span>.imageViewerCtrl.create(myImage, config);\n    imageViewer.present();\n  }\n    \nsomeFunc() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;Callback happened&apos;</span>)\n  }\n</code></pre></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</body></html>","meta":{"title":"Image Viewer","subtitle":"A quick summary of Image Viewer","path":"plugins/image-viewer"},"tree":[{"content":"Basic Usage","anchor":"basic-usage","nodes":[{"content":"Declaration","anchor":"declaration","nodes":[]},{"content":"Types of Usage","anchor":"types-of-usage","nodes":[]}]}],"parent":{"path":"plugins","title":"Plugins","subtitle":"A quick summary of Plugins"}}