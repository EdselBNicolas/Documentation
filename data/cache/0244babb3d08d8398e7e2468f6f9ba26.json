{"html":"<!-- TITLE: Tslint Rules --><!-- SUBTITLE: Lint rules encode logic for syntactic & semantic checks of TypeScript source code --><html><head></head><body><h1 id=\"list-of-rules\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#list-of-rules\" aria-hidden=\"true\"></a> List of Rules</h1>\n<p>These rules find errors related to TypeScript features:</p>\n<pre class=\"hljs\"><code>    <span class=\"hljs-string\">&quot;align&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;elements&quot;</span>, <span class=\"hljs-string\">&quot;members&quot;</span>, <span class=\"hljs-string\">&quot;parameters&quot;</span>, <span class=\"hljs-string\">&quot;statements&quot;</span>], \n    // Consistent alignment for code statements helps keep code readable and clear\n    \n    <span class=\"hljs-string\">&quot;arrow-parens&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;ban-single-arg-parens&quot;</span>], \n    // allowed: test<span class=\"hljs-number\">1</span> =&gt; { } || (test<span class=\"hljs-number\">1</span>, test<span class=\"hljs-number\">2</span>) =&gt; {  }\n    \n    <span class=\"hljs-string\">&quot;curly&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;ignore-same-line&quot;</span>],\n    // if (x &gt; <span class=\"hljs-number\">0</span>) doStuff(); - PASSED | multiple lines enforces curly braces\n    \n    <span class=\"hljs-string\">&quot;indent&quot;</span>: {<span class=\"hljs-attr\">&quot;options&quot;</span>: [<span class=\"hljs-string\">&quot;spaces&quot;</span>, <span class=\"hljs-number\">2</span>]},\n    // Enforces indentation with tabs or spaces.\n    \n    <span class=\"hljs-string\">&quot;jsdoc-format&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;check-multiline-start&quot;</span>],\n    // enforce the first line of a multiline JSDoc comment to be empty.\n    \n    <span class=\"hljs-string\">&quot;member-access&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;no-public&quot;</span>], \n    // forbids public accessibility to be specified, because this is the default.\n    \n    <span class=\"hljs-string\">&quot;no-console&quot;</span>: <span class=\"hljs-literal\">false</span>,\n    // Disallow console methods\n    \n    <span class=\"hljs-string\">&quot;no-unused-expression&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;allow-fast-null-checks&quot;</span>],\n    // Disallows unused expression statements.\n    \n    <span class=\"hljs-string\">&quot;ordered-imports&quot;</span>: [<span class=\"hljs-literal\">true</span>, { <span class=\"hljs-attr\">&quot;options&quot;</span>: { <span class=\"hljs-attr\">&quot;import-sources-order&quot;</span>: <span class=\"hljs-string\">&quot;any&quot;</span>, <span class=\"hljs-attr\">&quot;named-imports-order&quot;</span>: <span class=\"hljs-string\">&quot;lowercase-last&quot;</span> } }],\n    // Requires that import statements be alphabetized and grouped.\n    \n    <span class=\"hljs-string\">&quot;quotemark&quot;</span>: {<span class=\"hljs-attr\">&quot;options&quot;</span>: [<span class=\"hljs-string\">&quot;single&quot;</span>, <span class=\"hljs-string\">&quot;jsx-double&quot;</span>, <span class=\"hljs-string\">&quot;avoid-escape&quot;</span>, <span class=\"hljs-string\">&quot;avoid-template&quot;</span>]},\n    // allowed quote =&gt; &apos;&apos; and &apos;lorem <span class=\"hljs-string\">&quot;ipsum&quot;</span>&apos;\n    \n    <span class=\"hljs-string\">&quot;variable-name&quot;</span>: {<span class=\"hljs-attr\">&quot;options&quot;</span>: [<span class=\"hljs-string\">&quot;ban-keywords&quot;</span>, <span class=\"hljs-string\">&quot;check-format&quot;</span>, <span class=\"hljs-string\">&quot;allow-leading-underscore&quot;</span>, <span class=\"hljs-string\">&quot;allow-snake-case&quot;</span>]},\n    // Checks variable names for various errors.\n    \n    <span class=\"hljs-string\">&quot;whitespace&quot;</span>: { <span class=\"hljs-attr\">&quot;options&quot;</span>: [<span class=\"hljs-string\">&quot;check-branch&quot;</span>, <span class=\"hljs-string\">&quot;check-decl&quot;</span>, <span class=\"hljs-string\">&quot;check-operator&quot;</span>, <span class=\"hljs-string\">&quot;check-module&quot;</span>, <span class=\"hljs-string\">&quot;check-separator&quot;</span>, <span class=\"hljs-string\">&quot;check-rest-spread&quot;</span>, <span class=\"hljs-string\">&quot;check-type&quot;</span>, <span class=\"hljs-string\">&quot;check-type-operator&quot;</span>, <span class=\"hljs-string\">&quot;check-preblock&quot;</span>] },\n    // Enforces whitespace style conventions.\n    \n    <span class=\"hljs-string\">&quot;class-name&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    // Enforces PascalCased class and interface names.\n    \n    <span class=\"hljs-string\">&quot;arrow-return-shorthand&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;multiline&quot;</span>],\n    // Suggests to convert () =&gt; { return x; } to () =&gt; x.\n    \n    // <span class=\"hljs-string\">&quot;file-name-casing&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;kebab-case&quot;</span>], removed due to conflict of file naming in reducers\n    // only small letters with dash(-) separator are allowed\n    \n    <span class=\"hljs-string\">&quot;only-arrow-functions&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;allow-declarations&quot;</span>, <span class=\"hljs-string\">&quot;allow-named-functions&quot;</span>],\n    // Disallows traditional (non-arrow) function expressions.\n    \n    <span class=\"hljs-string\">&quot;no-var-keyword&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    // RIP var\n    \n    <span class=\"hljs-string\">&quot;no-conditional-assignment&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    // reduce typos:  for example &apos;if (var<span class=\"hljs-number\">1</span> = var<span class=\"hljs-number\">2</span>)&apos; instead of &apos;if (var<span class=\"hljs-number\">1</span> === var<span class=\"hljs-number\">2</span>)&apos;\n    \n    <span class=\"hljs-string\">&quot;no-consecutive-blank-lines&quot;</span>: [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">2</span>],\n    // maximum of &apos;<span class=\"hljs-number\">2</span>&apos; blank lines is allowed (new line)\n    \n    <span class=\"hljs-string\">&quot;no-empty&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    // Disallows empty blocks.\n    \n    <span class=\"hljs-string\">&quot;prefer-template&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    // Prefer a template expression over string literal concatenation. `foo${bar}` over &apos;foo&apos; + &apos;bar&apos;\n    \n    <span class=\"hljs-string\">&quot;no-duplicate-imports&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    // keep single import for multiple classes\n    \n    <span class=\"hljs-string\">&quot;no-duplicate-variable&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    // Disallows declaration of the same variable name\n    \n    <span class=\"hljs-string\">&quot;no-unused-variable&quot;</span>: <span class=\"hljs-literal\">true</span>\n    // Forbids unused variables\n</code></pre>\n<p>If you need changes to the tslint, please feel free to add/modify the file and update the wiki</p>\n<p>Full list of rules can be found here:<br>\nSource: <a href=\"https://palantir.github.io/tslint/rules/\" class=\"external-link\">https://palantir.github.io/tslint/rules/</a></p>\n</body></html>","meta":{"title":"Tslint Rules","subtitle":"Lint rules encode logic for syntactic & semantic checks of TypeScript source code","path":"tslint-rules"},"tree":[{"content":"List of Rules","anchor":"list-of-rules","nodes":[]}],"parent":false}