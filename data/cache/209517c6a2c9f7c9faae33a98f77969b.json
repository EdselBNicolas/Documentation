{"html":"<!-- TITLE: Immutability vs Mutation In JavaScript --><!-- SUBTITLE: A quick summary of Immutability Vs Mutation In Java Script --><html><head></head><body><h3 id=\"immutability-is-a-hot-subject-in-modern-java-script-the-reason-why-this-topic-is-so-popular-now-is-of-course-the-functional-programming-paradigm\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#immutability-is-a-hot-subject-in-modern-java-script-the-reason-why-this-topic-is-so-popular-now-is-of-course-the-functional-programming-paradigm\" aria-hidden=\"true\"></a> Immutability is a hot subject in modern JavaScript. The reason why this topic is so popular now is of course the functional programming paradigm</h3><div class=\"indent-h3\"></div>\n<h3 id=\"immutable-data-is-tightly-connected-with-a-functional-approach-where-any-mutation-is-considered-as-an-unwanted-side-effect-without-further-ado-lets-dive-into-details-of-mutability-and-immutability\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#immutable-data-is-tightly-connected-with-a-functional-approach-where-any-mutation-is-considered-as-an-unwanted-side-effect-without-further-ado-lets-dive-into-details-of-mutability-and-immutability\" aria-hidden=\"true\"></a> Immutable data is tightly connected with a functional approach where any mutation is considered as an unwanted side effect. Without further ado, let&#x2019;s dive into details of mutability and immutability.</h3><div class=\"indent-h3\"></div>\n<h1 id=\"objects-are-mutable-in-java-script\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#objects-are-mutable-in-java-script\" aria-hidden=\"true\"></a> Objects are mutable in JavaScript</h1>\n<p>In JavaScript, you can add properties to an object. When you do so after instantiating it, the object is changed permanently. It mutates, like how an X-Men member mutates when they gain powers.</p>\n<p>Here are some examples below:</p>\n<p>*** Mutation in objects***</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> obj = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Will&quot;</span> }\n\n<span class=\"hljs-built_in\">console</span>.log(obj) <span class=\"hljs-comment\">// Outputs Will</span>\n\nobj.name = <span class=\"hljs-string\">&quot;Fred&quot;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(obj) <span class=\"hljs-comment\">// Outputs Fred which have been directly mutated</span>\n</code></pre>\n<p>Mutation is pretty normal in JavaScript. You use it all the time. But this can cause a problem when working with large data sets with arrays or objects.</p>\n<p>In JavaScript, the same problem with mutation applies. If your code is mutable, you might change (and break) something without knowing.</p>\n<p>Objects are mutable in JavaScript<br>\nIn JavaScript, you can add properties to an object. When you do so after instantiating it, the object is changed permanently. It mutates, like how an X-Men member mutates when they gain powers.</p>\n<p>In the example below, the variable egg mutates once you add the isBroken property to it. We say that objects (like egg) are mutable (have the ability to mutate).</p>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">const</span> egg = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Humpty Dumpty&quot;</span> };\negg.isBroken = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(egg);\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">//   name: &quot;Humpty Dumpty&quot;,</span>\n<span class=\"hljs-comment\">//   isBroken: false</span>\n<span class=\"hljs-comment\">// }</span>\nMutation is pretty normal <span class=\"hljs-keyword\">in</span> JavaScript. You use it all the time.\n</code></pre>\n<p><strong>Here&#x2019;s when mutation becomes scary.</strong></p>\n<p>Let&#x2019;s say you create a constant variable called newEgg and assign egg to it. Then you want to change the name of newEgg to something else.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> egg = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Humpty Dumpty&quot;</span> };\n\n<span class=\"hljs-keyword\">const</span> newEgg = egg;\nnewEgg.name = <span class=\"hljs-string\">&quot;Errr ... Not Humpty Dumpty&quot;</span>;\n</code></pre>\n<p>When you change (mutate) newEgg, did you know egg gets mutated automatically?</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(egg);\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">//   name: &quot;Errr ... Not Humpty Dumpty&quot;</span>\n<span class=\"hljs-comment\">// }</span>\n</code></pre>\n<p>The example above illustrates why mutation can be scary&#x2014;when you change one piece of your code, another piece can change somewhere else without your knowing. As a result, you&#x2019;ll get bugs that are hard to track and fix.</p>\n<p>This weird behavior happens because objects are passed by reference in JavaScript.</p>\n<p>Here is one simple solution to avoid this mutations in objects.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> a = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Will&quot;</span>, age <span class=\"hljs-number\">35</span> }\n\n<span class=\"hljs-keyword\">let</span> b = { ...a, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Fred&quot;</span> }\n\n<span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// Outputs { name: &quot;Will&quot;, age: 35 }</span>\n\n<span class=\"hljs-built_in\">console</span>.log(b) <span class=\"hljs-comment\">// Outputs { name: &quot;Fred&quot;, age: 35 }</span>\n</code></pre>\n<p>In the example above we didn&apos;t mutate the value of a. Instead we clone the value of <strong>a <strong>using</strong> object spread operator</strong> like this <code>{ ...object_passed }</code>. The first arguement in the <strong>spread operator</strong> is the <strong>object</strong> that we want to clone like this <code>...object</code> on the second arguement we can pass anything that we want to modify without mutating the object that we cloned. There can be more than second arguement if you want to add some properties or you want to modify some more data in the object.</p>\n</body></html>","meta":{"title":"Immutability vs Mutation In JavaScript","subtitle":"A quick summary of Immutability Vs Mutation In Java Script","path":"immutability-vs-mutation-in-java-script"},"tree":[{"content":"Objects are mutable in JavaScript","anchor":"objects-are-mutable-in-java-script","nodes":[]}],"parent":false}