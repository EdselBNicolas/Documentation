{"html":"<!-- TITLE: Formdata --><!-- SUBTITLE: A quick summary of Formdata --><html><head></head><body><h1 id=\"formdata\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#formdata\" aria-hidden=\"true\"></a> Formdata</h1>\n<p>The FormData  provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method.<br>\nIt uses the same format a form would use if the encoding type were set to &quot;multipart/form-data&quot;.</p>\n<p>Formdata provider is in  &#x1F4C1;providers &gt; &#x1F4C4;formdata.ts</p>\n<p>In that folder, you have two functions namely:</p>\n<ol>\n<li><code>generateBlob()</code></li>\n</ol>\n<ul>\n<li>This function lets you convert your <code>base64</code> image/video format to <code>blob</code> object. A Blob object represents a file-like object of immutable, raw data. Blob objects are used when passing image data into the API.</li>\n</ul>\n<ol start=\"2\">\n<li><code>generate()</code></li>\n</ol>\n<ul>\n<li>This function converts all your array of data to <code>formdata</code>. The backend usually requires data passed must be in formdata format.</li>\n</ul>\n</body></html>","meta":{"title":"Formdata","subtitle":"A quick summary of Formdata","path":"providers/documentation-for-formdata"},"tree":[{"content":"Formdata","anchor":"formdata","nodes":[]}],"parent":{"path":"providers","title":"Providers","subtitle":"A quick summary of Providers"}}