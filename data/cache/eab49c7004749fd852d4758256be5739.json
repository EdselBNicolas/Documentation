{"html":"<!-- TITLE: Http Interceptor --><!-- SUBTITLE: Intercepts HttpRequest and handles them --><html><head></head><body><h1 id=\"description\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#description\" aria-hidden=\"true\"></a> Description</h1>\n<p>Global application of request (headers [token, content-type, etc]) and responses (error code handling [401,404,500])</p>\n<p>The cycle:</p>\n<p><img src=\"/uploads/untitled-diagram.png\" alt=\"Untitled Diagram\" title=\"Untitled Diagram\"></p>\n<p>Every time the request or response has been fired, the request/response will cross in the interceptor.</p>\n<h1 id=\"method\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#method\" aria-hidden=\"true\"></a> Method</h1>\n<pre class=\"hljs\"><code>intercept(req: HttpRequest&lt;<span class=\"hljs-built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"hljs-built_in\">any</span>&gt;&gt; {\n</code></pre>\n<p>Parameters</p>\n<pre><code> req\tHttpRequest\t\n next\tHttpHandler\t\n</code></pre>\n<p>Returns</p>\n<pre><code>Observable&lt;HttpEvent&lt;any&gt;&gt;\n</code></pre>\n<p>Typically an interceptor will transform the outgoing request before returning next.handle(transformedReq). An interceptor may choose to transform the response event stream as well, by applying additional Rx operators on the stream returned by next.handle().</p>\n<p>More rarely, an interceptor may choose to completely handle the request itself, and compose a new event stream instead of invoking next.handle(). This is acceptable behavior, but keep in mind further interceptors will be skipped entirely.</p>\n<p>It is also rare but valid for an interceptor to return multiple responses on the event stream for a single request. (source: <a href=\"https://angular.io/api/common/http/HttpInterceptor#intercept\" class=\"external-link\">https://angular.io/api/common/http/HttpInterceptor#intercept</a>)</p>\n<pre class=\"hljs\"><code>    <span class=\"hljs-keyword\">const</span> dupReq = req.clone({ headers });\n</code></pre>\n<p>dupReq will duplicate the request data and will append the headers inside the clone function</p>\n<pre class=\"hljs\"><code>     <span class=\"hljs-keyword\">return</span> next.handle(dupReq);\n</code></pre>\n<p>next.handle function will return the modified request and will be sent to the api</p>\n<h1 id=\"usage\"><a class=\"toc-anchor nc-icon-outline location_bookmark-add internal-link\" href=\"#usage\" aria-hidden=\"true\"></a> Usage</h1>\n<pre class=\"hljs\"><code> intercept(req: HttpRequest&lt;<span class=\"hljs-built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"hljs-built_in\">any</span>&gt;&gt; {\n        <span class=\"hljs-keyword\">const</span> ignore = <span class=\"hljs-string\">&apos;/u/auth/login&apos;</span>;\n        <span class=\"hljs-keyword\">return</span> fromPromise(<span class=\"hljs-keyword\">this</span>.storage.get(<span class=\"hljs-string\">&apos;token&apos;</span>)).pipe(switchMap(<span class=\"hljs-function\"><span class=\"hljs-params\">token</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">if</span> (req.url.search(ignore) === <span class=\"hljs-number\">-1</span>) {\n                <span class=\"hljs-keyword\">const</span> headers = <span class=\"hljs-keyword\">new</span> HttpHeaders({\n                    <span class=\"hljs-string\">&apos;Authorization&apos;</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${token}</span>`</span>,\n                    <span class=\"hljs-string\">&apos;Content-Type&apos;</span>: <span class=\"hljs-string\">&apos;application/json&apos;</span> \n                })\n                <span class=\"hljs-keyword\">const</span> dupReq = req.clone({ headers });\n                <span class=\"hljs-keyword\">return</span> next.handle(dupReq);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> next.handle(req)\n            }\n        }))\n    }\n</code></pre>\n<p>Inside the intercept block, there are 3 process that includes:</p>\n<ul>\n<li>Checking for Http request that do not need to modify</li>\n</ul>\n<pre class=\"hljs\"><code> <span class=\"hljs-keyword\">const</span> ignore = <span class=\"hljs-string\">&apos;/u/auth/login&apos;</span>;\n</code></pre>\n<p>the value of &apos;ignore&apos; will be skipped in and will directly return the raw request</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">if</span> (req.url.search(ignore) === <span class=\"hljs-number\">-1</span>)\n</code></pre>\n<p>The value -1 means the &apos;ignore&apos; variable value is not present in the string url from &apos;req.url&apos; request</p>\n<ul>\n<li>Adding headers to qualified requests</li>\n</ul>\n<p>If the &apos;req.url&apos; value equates to -1, the header will append in the request</p>\n<pre class=\"hljs\"><code>  <span class=\"hljs-keyword\">const</span> headers = <span class=\"hljs-keyword\">new</span> HttpHeaders({\n                    <span class=\"hljs-string\">&apos;Authorization&apos;</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${token}</span>`</span>,\n                    <span class=\"hljs-string\">&apos;Content-Type&apos;</span>: <span class=\"hljs-string\">&apos;application/json&apos;</span>\n  })\n</code></pre>\n<p>using</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> dupReq = req.clone({ headers });\n</code></pre>\n<ul>\n<li>Returning of the request</li>\n</ul>\n<p>and lastly, return the request</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">return</span> next.handle(dupReq);\n</code></pre>\n</body></html>","meta":{"title":"Http Interceptor","subtitle":"Intercepts HttpRequest and handles them","path":"modules/http-interceptor"},"tree":[{"content":"Description","anchor":"description","nodes":[]},{"content":"Method","anchor":"method","nodes":[]},{"content":"Usage","anchor":"usage","nodes":[]}],"parent":{"path":"modules","title":"Modules","subtitle":"A quick summary of Modules"}}